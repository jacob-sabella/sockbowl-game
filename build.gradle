import cz.habarta.typescript.generator.ClassMapping
import cz.habarta.typescript.generator.EnumMapping
import cz.habarta.typescript.generator.TypeScriptFileType
import org.springframework.boot.gradle.tasks.bundling.BootBuildImage

plugins {
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'cz.habarta.typescript-generator' version '3.2.1263'
}

group = 'com.soulsoftworks'
version = resolveVersion()
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0'
    implementation 'org.springframework.cloud:spring-cloud-dependencies:2025.0.0'
    implementation 'io.github.openfeign:feign-okhttp:13.6'
    implementation 'io.github.openfeign:feign-httpclient:13.6'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.redis.om:redis-om-spring:1.0.1'
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation 'org.projectlombok:lombok:1.18.38'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.github.victools:jsonschema-generator:4.38.0'
    implementation 'com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-gradle:8.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'io.projectreactor:reactor-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:testcontainers:1.21.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.21.3'
    testImplementation 'com.redis.testcontainers:testcontainers-redis-junit-jupiter:1.4.6'
    testImplementation 'org.awaitility:awaitility:4.3.0'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = ['com.soulsoftworks.sockbowlgame.model.**',]
    excludeClasses = [
            'com.soulsoftworks.sockbowlgame.model.state.GameSessionSanitizer',
            'com.soulsoftworks.sockbowlgame.model.socket.out.SockbowlMultiOutMessage'
    ]
    excludeClassPatterns = ['com.soulsoftworks.sockbowlgame.model.**Builder**']
    outputKind = 'module'
    outputFile = "build/typescript-generation/sockbowl-interfaces.ts"
    outputFileType = TypeScriptFileType.implementationFile
    mapEnum = EnumMapping.asEnum
    nonConstEnums = true
    mapClasses = ClassMapping.asClasses
    generateConstructors = true
}

test {
    useJUnitPlatform()
}

/* ----------------------------- Spring Boot image --------------------------- */
bootBuildImage {
    createdDate = "now"
    def repo = (System.getenv('GITHUB_REPOSITORY') ?: 'OWNER/REPO')
    imageName = "ghcr.io/${repo}:${project.version}"
}

/* ------------------------------- Utilities -------------------------------- */
tasks.register('printVersion') {
    group = 'help'
    description = 'Prints the current project version'
    doLast { println project.version }
}

static String resolveVersion() {
    // GitHub Actions refs look like:
    //  - refs/heads/feature/foo        (branch)
    //  - refs/tags/v1.2.3              (tag)
    //  - PRs: GITHUB_HEAD_REF is the source branch name
    String gitRef      = System.getenv('GITHUB_REF')
    String refName     = System.getenv('GITHUB_REF_NAME')   // branch or tag name for the current ref
    String headRef     = System.getenv('GITHUB_HEAD_REF')   // PR source branch
    String branchName  = null
    String releasePrefix = System.getenv('RELEASE_BRANCH_PREFIX') ?: 'release/'

    boolean isTagBuild    = (gitRef != null && gitRef.startsWith('refs/tags/'))
    boolean isBranchBuild = (gitRef != null && gitRef.startsWith('refs/heads/'))

    if (isTagBuild) {
        // vX.Y.Z -> X.Y.Z ; X.Y.Z -> X.Y.Z
        return stripLeadingV(refName)
    }

    // Determine branch name (CI or local)
    if (isBranchBuild) {
        branchName = refName
    } else if (headRef) {
        branchName = headRef
    } else {
        branchName = execAndRead("git rev-parse --abbrev-ref HEAD")
    }
    if (!branchName) branchName = "detached"

    if (branchName.startsWith(releasePrefix)) {
        // release/0.0.2 -> 0.0.2
        String ver = branchName.substring(releasePrefix.length())
        return ver ?: "0.0.0"
    }

    // Any other branch: just the sanitized branch name
    return sanitizeBranch(branchName)
}

static String stripLeadingV(String tag) {
    if (tag == null) return "0.0.0"
    return tag.startsWith("v") ? tag.substring(1) : tag
}

static String sanitizeBranch(String name) {
    // Lowercase; keep [a-z0-9._-]; convert others (including '/') to '-'
    return (name ?: "dev").toLowerCase(Locale.ROOT).replaceAll("[^a-z0-9._-]", "-")
}

static String execAndRead(String cmd) {
    try {
        def p = cmd.execute()
        p.waitFor()
        return p.exitValue() == 0 ? p.text.trim() : null
    } catch (Exception ignored) {
        return null
    }
}