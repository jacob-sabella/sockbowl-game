import cz.habarta.typescript.generator.ClassMapping
import cz.habarta.typescript.generator.EnumMapping
import cz.habarta.typescript.generator.TypeScriptFileType
import org.springframework.boot.gradle.tasks.bundling.BootBuildImage

plugins {
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'cz.habarta.typescript-generator' version '3.2.1263'
}

group = 'com.soulsoftworks'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.3'
    implementation 'org.springframework.cloud:spring-cloud-dependencies:2023.0.3'
    implementation 'io.github.openfeign:feign-okhttp:13.3'
    implementation 'io.github.openfeign:feign-httpclient:13.5'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.redis.om:redis-om-spring:0.8.9'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.projectlombok:lombok:1.18.36'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-gradle:7.0.3'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'io.projectreactor:reactor-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:testcontainers:1.20.4'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation 'com.redis.testcontainers:testcontainers-redis-junit-jupiter:1.4.6'
    testImplementation 'org.awaitility:awaitility:4.2.2'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = ['com.soulsoftworks.sockbowlgame.model.**',]
    excludeClasses = [
            'com.soulsoftworks.sockbowlgame.model.state.GameSessionSanitizer',
            'com.soulsoftworks.sockbowlgame.model.socket.out.SockbowlMultiOutMessage'
    ]
    excludeClassPatterns = ['com.soulsoftworks.sockbowlgame.model.**Builder**']
    outputKind = 'module'
    outputFile = "build/typescript-generation/sockbowl-interfaces.ts"
    outputFileType = TypeScriptFileType.implementationFile
    mapEnum = EnumMapping.asEnum
    nonConstEnums = true
    mapClasses = ClassMapping.asClasses
    generateConstructors = true
}

test {
    useJUnitPlatform()
}

bootBuildImage {
    createdDate = "now"
    imageName = "jacob-sabella/${project.name}:${gitBranch()}"
}

static def gitBranch() {
    def branch = 'SNAPSHOT'
    try {
        branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } catch (Exception ignored) {}
    return branch
}

